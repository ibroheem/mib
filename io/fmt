#ifndef io_fmt_h
#define io_fmt_h

#include <fmt/format.h>
#include <fmt/ostream.h>
//#include <fmt/printf.h>

using std::ostream;
using std::is_signed;
using std::is_unsigned;
using std::array;

#if __cpp_concepts >= 201507

namespace fmt{
template <class T>
concept bool Integral = is_signed<T>::value || is_unsigned<T>::value;
}
template <fmt::Integral T, size_t N>
ostream& operator << (ostream& out, std::array<T, N> arr)
{
   for (T &c : arr)
      out <<c;
   return out;
}

template <fmt::Integral T, size_t N, fmt::Integral Disp>
ostream& operator << (ostream& out, std::array<T, N> arr)
{
   for (T &c : arr)
      out << (Disp)c << ' ';
   return out;
}

#endif // __cpp_concepts

#define IO_FMT

namespace fmt
{
   /// Like BasicMemoryWriter, except size comes in template arg
   template <typename Char, size_t SZ, typename Allocator = std::allocator<Char> >
   class basic_mem_writer : public BasicWriter<Char>
   {
      private:
         internal::MemoryBuffer<Char, SZ, Allocator> buffer_;

      public:
         explicit basic_mem_writer(const Allocator& alloc = Allocator())
            : BasicWriter<Char>(buffer_), buffer_(alloc) {}

         basic_mem_writer(basic_mem_writer &&other)
            : BasicWriter<Char>(buffer_), buffer_(std::move(other.buffer_))
         {
         }

         basic_mem_writer &operator=(basic_mem_writer &&other)
         {
            buffer_ = std::move(other.buffer_);
            return *this;
         }

         size_t max_size() { return SZ; }
   };

   template <class T, size_t N>
   using mem_writer_generic = basic_mem_writer<T, N>;

#if __cpp_concepts >= 201507
   //template <class T, size_t N>
   //concept bool mem_writer_t =
#endif // __cpp_concepts

   using mem_writer32_t = basic_mem_writer<char, 32>;
   using mem_writer40_t = basic_mem_writer<char, 40>;
   using mem_writer64_t = basic_mem_writer<char, 64>;

   using mem_writer128_t = basic_mem_writer<char, 128>;
   using mem_writer256_t = basic_mem_writer<char, 256>;
   using mem_writer512_t = basic_mem_writer<char, 512>;

   using mem_writer1KB_t = basic_mem_writer<char, 1024>;

   using umem_writer40_t  = basic_mem_writer<unsigned char, 40>;
   using umem_writer512_t = basic_mem_writer<unsigned char, 512>;
}

namespace fmt
{
//#ifdef
   template <class ...T>
   void print_blue(const char* frmt, T&&... args)
   {
      print_colored(Color::BLUE, frmt, args...);
   }

   template <class ...T>
   void print_cyan(const char* frmt, T&&... args)
   {
      print_colored(Color::CYAN, frmt, args...);
   }

   template <class ...T>
   void print_green(const char* frmt, T&&... args)
   {
      print_colored(Color::GREEN, frmt, args...);
   }

   template <class ...T>
   inline void print_magenta(const char* frmt, T&&... args)
   {
      print_colored(Color::MAGENTA, frmt, args...);
   }

   template <class ...T>
   inline void print_red(const char* frmt, T&&... args)
   {
      print_colored(Color::RED, frmt, args...);
   }

   template <class ...T>
   inline void print_white(const char* frmt, T&&... args)
   {
      print_colored(Color::WHITE, frmt, args...);
   }

   template <class ...T>
   inline void print_yellow(const char* frmt, T&&... args)
   {
      print_colored(Color::YELLOW, frmt, args...);
   }

   template <class ...Args>
   void print_base(CStringRef formt, Args&&...args)
   {
      print("{}", format(formt, args...));
   }

   template <class ...Args>
   void print_base_w_color(Color color, CStringRef formt, Args&&...args)
   {
      print_colored(color, "{}", format(formt, args...));
   }
}

namespace io_fmt = fmt;

#endif//io_fmt_h
